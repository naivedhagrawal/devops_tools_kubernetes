apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: devops-tools
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          envFrom:
            - secretRef:
                name: postgres-secrets
          ports:
            - containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 1
              memory: 2Gi
            limits:
              cpu: 2
              memory: 4Gi
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    psql -U postgres -d template1 -c "CREATE DATABASE gitleak;" 2>/dev/null || echo "Error creating gitleak"
                    psql -U postgres -d template1 -c "CREATE DATABASE owaspdependency;" 2>/dev/null || echo "Error creating owaspdependency"
                    psql -U postgres -d template1 -c "CREATE DATABASE zap;" 2>/dev/null || echo "Error creating zap"
                    psql -U postgres -d template1 -c "CREATE DATABASE trivy;" 2>/dev/null || echo "Error creating trivy"
                    psql -U postgres -d template1 -c "CREATE DATABASE semgrep;" 2>/dev/null || echo "Error creating semgrep"
          securityContext:
            runAsUser: 0
            runAsGroup: 999
            fsGroup: 999
          volumeMounts:
            - name: data-disk
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: data-disk
          persistentVolumeClaim:
            claimName: postgres-pvc
      nodeSelector:
        kubernetes.io/hostname: kind-worker
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: devops-tools
spec:
  type: ClusterIP # For internal cluster access
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-postgres
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
kind: PersistentVolume
apiVersion: v1
metadata:
  namespace: devops-tools
  name: postgres-pv
  labels:
    type: local
    app: postgres
spec:
  storageClassName: local-postgres
  claimRef:
    name: postgres-pvc
    namespace: devops-tools
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  local:
    path: /home/data/postgres # Ensure this path exists on the node
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - kind-worker # Ensure this matches your node label
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: devops-tools
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-postgres
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: devops-tools
type: Opaque
stringData:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres # REPLACE with a real password using kubectl create secret