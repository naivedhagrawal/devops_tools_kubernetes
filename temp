pipeline {
    agent any
    stages {
        stage('Insert JSON') {
            steps {
                script {
                    def jsonFile = 'path/to/your/report.json'
                    def tableName = 'your_table_name' // Table with a JSONB column
                    def jsonColumn = 'report_data' // Name of your JSONB column
                    def dbUser = 'your_db_user'
                    def dbPassword = credentials('postgres_password')
                    def dbName = 'your_db_name'
                    def dbHost = 'your_db_host'

                    def sql = sh(returnStdout: true, script: """
                        jq -r '. | @json' ${jsonFile}  // Convert the entire JSON to a string
                    """).trim()

                    // Handle JSON array or single object
                    if (sql.startsWith('[')) { // JSON array
                        def insertStatements = sql.replaceAll('\\[(.*)\\]', '$1').split('},\\{')*.collect {
                            "INSERT INTO ${tableName} (${jsonColumn}) VALUES ('${it.replaceFirst('\\{','').replaceLast('}','')}'::jsonb);"
                        }.join('\n')
                        sh """
                           psql -U ${dbUser} -d ${dbName} -h ${dbHost} -w -v ON_ERROR_STOP=1 -c "${insertStatements}"
                        """, credentialsId: 'postgres_password'

                    } else { // Single JSON object
                        def insertStatement = "INSERT INTO ${tableName} (${jsonColumn}) VALUES ('${sql}'::jsonb);"
                        sh """
                           psql -U ${dbUser} -d ${dbName} -h ${dbHost} -w -v ON_ERROR_STOP=1 -c "${insertStatement}"
                        """, credentialsId: 'postgres_password'
                    }


                }
            }
        }
    }
}

pipeline {
    agent any
    stages {
        
    }
}