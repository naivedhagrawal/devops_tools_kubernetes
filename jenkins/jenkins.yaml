#Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-admin
  namespace: devops-tools
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins
  namespace: devops-tools
  labels:
    "app.kubernetes.io/name": "jenkins"
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-role-binding
  namespace: devops-tools
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins-admin
  namespace: devops-tools

#Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: sa-token-secret
  namespace: devops-tools
  annotations:
    kubernetes.io/service-account.name: jenkins-admin
type: kubernetes.io/service-account-token


#Volumes
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage-jenkins
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

#Persistent Volume
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv-volume
spec:
  storageClassName: local-storage-jenkins
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /home/data/jenkins

#Persistent Volume Claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
spec:
  storageClassName: local-storage-jenkins
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

#Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
  namespace: devops-tools
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 
      maxSurge: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins-admin
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: install-fonts
          image: alpine:latest
          securityContext:
            runAsUser: 0   # Run as root
            runAsGroup: 0   # Run as root group
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache font-noto font-noto-cjk font-noto-emoji
              cp -r /usr/share/fonts /fonts
          volumeMounts:
            - name: font-cache
              mountPath: /fonts
      containers:
        - name: jenkins
          image: jenkins/jenkins:lts
          args: ["--httpPort=8080"]
          env:
            - name: JAVA_OPTS
              value: "-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: font-cache
              mountPath: /usr/share/fonts
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-pv-claim
        - name: font-cache
          emptyDir: {}

#Service
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  namespace: devops-tools
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector: 
    app: jenkins
  type: NodePort 
  ports:
    - name: httpport
      protocol: TCP
      nodePort: 30080
      targetPort: 8080
      port: 8080
    - name: jnlpport
      protocol: TCP
      port: 50000
      targetPort: 50000
