# Persistent Volume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  storageClassName: hostpath-storage
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/data/postgres"
---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: hostpath-storage
  resources:
    requests:
      storage: 20Gi
---
# Secret for PostgreSQL
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: devops-tools
  labels:
    app: postgres
    env: dev
stringData:
  POSTGRES_HOST: postgres.devops-tools.svc.cluster.local
  POSTGRES_PORT: "5432"
  POSTGRES_USER: backstage
  POSTGRES_PASSWORD: backstage
  POSTGRES_DB: backstage
---
# Secret for GitHub OAuth
apiVersion: v1
kind: Secret
metadata:
  name: github-secrets
  namespace: devops-tools
  labels:
    app: backstage
    env: dev
stringData:
  GITHUB_CLIENT_ID: Ov23liTdg4cnjlZHraXG
  GITHUB_CLIENT_SECRET: c9a6462f3825782d07091724cb18a66b136185b8
  GITHUB_TOKEN: your-github-token-here
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: devops-tools
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          imagePullPolicy: Always
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
          ports:
            - name: postgres-port
              containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: devops-tools
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - name: postgres-port
      protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: devops-tools
  labels:
    app: backstage
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      containers:
        - name: backstage
          image: naivedh/backstage:latest
          imagePullPolicy: Always
          ports:
            - name: backend-port
              containerPort: 7007
          envFrom:
            - secretRef:
                name: github-secrets
            - secretRef:
                name: postgres-secrets
          livenessProbe:
            httpGet:
              path: /health
              port: 7007
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 7007
            initialDelaySeconds: 10
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: devops-tools
  labels:
    app: backstage
spec:
  selector:
    app: backstage
  ports:
    - name: backend
      protocol: TCP
      port: 7007
      targetPort: 7007
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backstage-ingress
  namespace: devops-tools
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false" # Disable HTTPS for now
spec:
  ingressClassName: nginx
  rules:
    - host: devops.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backstage
                port:
                  number: 7007