# Persistent Volume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  storageClassName: hostpath-storage
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/data/postgres"
---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: hostpath-storage
  resources:
    requests:
      storage: 20Gi
---
# Secret for PostgreSQL
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: devops-tools
  labels:
    app: postgres
    env: dev
stringData:
  POSTGRES_USER: backstage
  POSTGRES_PASSWORD: backstage
  POSTGRES_DB: backstage
---
# Secret for GitHub OAuth
apiVersion: v1
kind: Secret
metadata:
  name: github-secrets
  namespace: devops-tools
  labels:
    app: backstage
    env: dev
stringData:
  GITHUB_CLIENT_ID: Ov23liTdg4cnjlZHraXG
  GITHUB_CLIENT_SECRET: c9a6462f3825782d07091724cb18a66b136185b8
  GITHUB_TOKEN: your-github-token-here
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: devops-tools
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          imagePullPolicy: Always
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
          ports:
            - name: postgres-port
              containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: devops-tools
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - name: postgres-port
      protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: devops-tools
  labels:
    app: backstage
    env: dev
data:
  app-config.yaml: |
    app:
      title: AXIS MAXLIFE INSURANCE
      baseUrl: http://localhost:3000
    organization:
      name: AXIS MAXLIFE INSURANCE
    backend:
      baseUrl: http://localhost:7007
      listen:
        port: 7007
        host: 0.0.0.0
      csp:
        connect-src: ['self', 'http:', 'https:']
      cors:
        origin: http://localhost:3000
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: postgres.devops-tools.svc.cluster.local
          port: 5432
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          database: ${POSTGRES_DB}
    integrations:
      github:
        - host: github.com
          token: ${GITHUB_TOKEN}
    proxy: {}
    techdocs:
      builder: 'local'
      generator:
        runIn: 'local'
      publisher:
        type: 'local'
    auth:
      providers:
        github:
          development:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
            callbackUrl: http://localhost:7007/api/auth/github/handler/frame
    scaffolder: {}
    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location]
      locations:
        - type: file
          target: ../../examples/entities.yaml
        - type: file
          target: ../../examples/template/template.yaml
          rules:
            - allow: [Template]
        - type: file
          target: ../../examples/org.yaml
          rules:
            - allow: [User, Group]
      useUrlReadersSearch: true
    permission:
      enabled: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: devops-tools
  labels:
    app: backstage
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      containers:
        - name: backstage
          image: ghcr.io/backstage/backstage:latest
          imagePullPolicy: Always
          ports:
            - name: backend-port
              containerPort: 7007
            - name: frontend-port
              containerPort: 3000
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
          envFrom:
            - secretRef:
                name: github-secrets
            - secretRef:
                name: postgres-secrets
          livenessProbe:
            httpGet:
              path: /health
              port: 7007
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 7007
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: config-volume
          configMap:
            name: backstage-config
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: devops-tools
  labels:
    app: backstage
spec:
  selector:
    app: backstage
  ports:
    - name: backend
      protocol: TCP
      port: 7007
      targetPort: 7007
      nodePort: 32091
    - name: frontend
      protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 32092
  type: NodePort
