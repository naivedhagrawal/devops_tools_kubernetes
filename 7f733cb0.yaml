# Harbor v2.13.2 Kubernetes YAML Manifest
# This manifest includes all necessary components to deploy Harbor container registry
# Latest version as of September 2025

apiVersion: v1
kind: Namespace
metadata:
  name: harbor
  labels:
    name: harbor
    app: harbor

---
# Certificate for Harbor (if using cert-manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: harbor-tls
  namespace: harbor
spec:
  secretName: harbor-tls-secret
  issuerRef:
    name: letsencrypt-prod  # Replace with your issuer
    kind: ClusterIssuer
  commonName: harbor.yourdomain.com  # Replace with your domain
  dnsNames:
  - harbor.yourdomain.com  # Replace with your domain

---
# PostgreSQL Database for Harbor
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-database
  namespace: harbor
spec:
  serviceName: harbor-database
  replicas: 1
  selector:
    matchLabels:
      app: harbor-database
  template:
    metadata:
      labels:
        app: harbor-database
    spec:
      containers:
      - name: database
        image: goharbor/harbor-db:v2.13.2
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          value: "changeit"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_DB
          value: "registry"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: database-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-database
  namespace: harbor
spec:
  selector:
    app: harbor-database
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis for Harbor
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  serviceName: harbor-redis
  replicas: 1
  selector:
    matchLabels:
      app: harbor-redis
  template:
    metadata:
      labels:
        app: harbor-redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.13.2
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  selector:
    app: harbor-redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Harbor Core Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core-config
  namespace: harbor
data:
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-core
  template:
    metadata:
      labels:
        app: harbor-core
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:v2.13.2
        ports:
        - containerPort: 8080
        env:
        - name: CORE_SECRET
          value: "not-a-secure-key"
        - name: JOBSERVICE_SECRET
          value: "not-a-secure-key"  
        - name: ADMIRAL_URL
          value: "NA"
        - name: WITH_NOTARY
          value: "false"
        - name: WITH_TRIVY
          value: "true"
        - name: WITH_CHARTMUSEUM
          value: "false"
        - name: DATABASE_TYPE
          value: "postgresql"
        - name: POSTGRESQL_HOST
          value: "harbor-database"
        - name: POSTGRESQL_PORT
          value: "5432"
        - name: POSTGRESQL_USERNAME
          value: "postgres"
        - name: POSTGRESQL_PASSWORD
          value: "changeit"
        - name: POSTGRESQL_DATABASE
          value: "registry"
        - name: POSTGRESQL_SSLMODE
          value: "disable"
        - name: REDIS_HOST
          value: "harbor-redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          value: ""
        - name: REDIS_DATABASE
          value: "0"
        - name: EXT_ENDPOINT
          value: "https://harbor.yourdomain.com"  # Replace with your domain
        - name: HARBOR_ADMIN_PASSWORD
          value: "Harbor12345"  # Change this password
        - name: LOG_LEVEL
          value: "info"
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
        - name: registry-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: harbor-core-config
      - name: secret-key
        emptyDir: {}
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry-data

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  namespace: harbor
spec:
  selector:
    app: harbor-core
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---
# Harbor Portal (UI)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-portal
  template:
    metadata:
      labels:
        app: harbor-portal
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.13.2
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  selector:
    app: harbor-portal
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---
# Harbor Registry
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-registry-config
  namespace: harbor
data:
  config.yml: |
    version: 0.1
    log:
      level: info
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        blobdescriptor: inmemory
      delete:
        enabled: true
    http:
      addr: :5000
      relativeurls: false
      draintimeout: 60s

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-registry
  template:
    metadata:
      labels:
        app: harbor-registry
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.13.2
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-data
          mountPath: /storage
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.13.2
        ports:
        - containerPort: 8080
        env:
        - name: CORE_SECRET
          value: "not-a-secure-key"
        - name: JOBSERVICE_SECRET
          value: "not-a-secure-key"
        volumeMounts:
        - name: registry-data
          mountPath: /storage
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: registry-config
        configMap:
          name: harbor-registry-config
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry-data

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  selector:
    app: harbor-registry
  ports:
  - name: registry
    port: 5000
    targetPort: 5000
  - name: controller
    port: 8080
    targetPort: 8080
  type: ClusterIP

---
# Harbor Job Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-jobservice
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-jobservice
  template:
    metadata:
      labels:
        app: harbor-jobservice
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.13.2
        ports:
        - containerPort: 8080
        env:
        - name: CORE_SECRET
          value: "not-a-secure-key"
        - name: JOBSERVICE_SECRET
          value: "not-a-secure-key"
        - name: CORE_URL
          value: "http://harbor-core:8080"
        - name: REDIS_URL
          value: "redis://harbor-redis:6379/1"
        - name: REGISTRY_URL
          value: "http://harbor-registry:5000"
        - name: REGISTRY_CONTROLLER_URL
          value: "http://harbor-registry:8080"
        volumeMounts:
        - name: jobservice-data
          mountPath: /var/log/jobs
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: jobservice-data
        persistentVolumeClaim:
          claimName: harbor-jobservice-data

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-jobservice
  namespace: harbor
spec:
  selector:
    app: harbor-jobservice
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---
# Trivy Security Scanner
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-trivy
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-trivy
  template:
    metadata:
      labels:
        app: harbor-trivy
    spec:
      containers:
      - name: trivy
        image: goharbor/trivy-adapter-photon:v2.13.2
        ports:
        - containerPort: 8080
        env:
        - name: SCANNER_LOG_LEVEL
          value: "info"
        - name: SCANNER_TRIVY_CACHE_DIR
          value: "/home/scanner/.cache/trivy"
        - name: SCANNER_TRIVY_REPORTS_DIR
          value: "/home/scanner/.cache/reports"
        - name: SCANNER_TRIVY_DEBUG_MODE
          value: "false"
        - name: SCANNER_TRIVY_VULN_TYPE
          value: "os,library"
        - name: SCANNER_TRIVY_SEVERITY
          value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        - name: SCANNER_TRIVY_IGNORE_UNFIXED
          value: "false"
        - name: SCANNER_TRIVY_SKIP_UPDATE
          value: "false"
        - name: SCANNER_TRIVY_OFFLINE_SCAN
          value: "false"
        - name: SCANNER_TRIVY_SECURITY_CHECK
          value: "vuln"
        - name: SCANNER_TRIVY_INSECURE
          value: "false"
        - name: SCANNER_TRIVY_TIMEOUT
          value: "5m0s"
        - name: SCANNER_REDIS_URL
          value: "redis://harbor-redis:6379/5"
        volumeMounts:
        - name: trivy-data
          mountPath: /home/scanner/.cache
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1"
      volumes:
      - name: trivy-data
        persistentVolumeClaim:
          claimName: harbor-trivy-data

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-trivy
  namespace: harbor
spec:
  selector:
    app: harbor-trivy
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---
# Nginx Proxy for Harbor
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-nginx-config
  namespace: harbor
data:
  nginx.conf: |
    worker_processes auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
      access_log  /var/log/nginx/access.log  main;
      sendfile        on;
      tcp_nopush      on;
      tcp_nodelay     on;
      keepalive_timeout  65;
      client_max_body_size 0;
      server {
        listen 8080;
        server_name  harbor.yourdomain.com;  # Replace with your domain
        location / {
          proxy_pass http://harbor-portal:8080;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }
        location /c/ {
          proxy_pass http://harbor-core:8080;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }
        location /api/ {
          proxy_pass http://harbor-core:8080;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }
        location /service/ {
          proxy_pass http://harbor-core:8080;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }
        location /v2/ {
          proxy_pass http://harbor-core:8080;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-nginx
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-nginx
  template:
    metadata:
      labels:
        app: harbor-nginx
    spec:
      containers:
      - name: nginx
        image: goharbor/nginx-photon:v2.13.2
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: nginx-config
        configMap:
          name: harbor-nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-nginx
  namespace: harbor
spec:
  selector:
    app: harbor-nginx
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-registry-data
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-jobservice-data
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-trivy-data
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Ingress for Harbor
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: harbor-ingress
  namespace: harbor
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Replace with your issuer
spec:
  tls:
  - hosts:
    - harbor.yourdomain.com  # Replace with your domain
    secretName: harbor-tls-secret
  rules:
  - host: harbor.yourdomain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harbor-nginx
            port:
              number: 80

---
# RBAC for Harbor
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor
  namespace: harbor

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: harbor
  name: harbor-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: harbor-rolebinding
  namespace: harbor
subjects:
- kind: ServiceAccount
  name: harbor
  namespace: harbor
roleRef:
  kind: Role
  name: harbor-role
  apiGroup: rbac.authorization.k8s.io
